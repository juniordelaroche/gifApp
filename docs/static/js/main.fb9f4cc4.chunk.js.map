{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGif.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGif","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAGe,SAASA,EAAT,GAAyC,IAAlBC,EAAiB,EAAjBA,cAAiB,EAEjBC,mBAAS,IAFQ,mBAE9CC,EAF8C,KAElCC,EAFkC,KAsBrD,OACE,0BAAMC,SAba,SAACC,GAEpBA,EAAEC,iBAGCJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,OAOd,2BACEO,KAAK,OACLC,MAAQT,EACRU,SAtBmB,SAACP,GACxBF,EAAcE,EAAEQ,OAAOF,WCPpB,IAAMG,EAAc,SAAC,GAAqB,EAApBC,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAEtC,OACE,yBAAKC,UAAU,0CACb,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,+BAAKA,EAAL,O,uBCNOK,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACdN,EADc,iDACmCO,UAAWF,GAD9C,+DAEDG,MAAOR,GAFN,cAEdS,EAFc,gBAGCA,EAAKC,OAHN,uBAGbC,EAHa,EAGbA,KAGDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACLhB,GAAQgB,EAAIhB,GACZC,MAAQe,EAAIf,MACZC,IAAG,UAAKc,EAAIC,cAAT,aAAK,EAAYC,iBAAiBhB,QAVrB,kBAcbY,GAda,4CAAH,sDCGNK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECDb,SAAEA,GAAe,IAAD,EAEhBrB,mBAAS,CACjC2B,KAAM,GACNO,SAAS,IAJ+B,mBAEnCC,EAFmC,KAE5BC,EAF4B,KAkB1C,OAXAC,qBAAU,WACRjB,EAAOC,GACJiB,MAAM,SAAAR,GACLM,EAAS,CACPT,KAAMG,EACNI,SAAS,SAGf,CAACb,IAGIc,EDf0BI,CAAalB,GAAlCU,EAF2B,EAEhCJ,KAAcO,EAFkB,EAElBA,QAErB,OACE,oCACE,wBAAIjB,UAAU,qCAAsCI,GAClDa,GAAW,uBAAGjB,UAAU,oCAAb,eACb,yBAAKA,UAAU,aAETc,EAAOF,KAAI,SAACC,GAAD,OACT,kBAAC,EAAD,eAAaU,IAAKV,EAAIhB,IAAQgB,UEgB7BW,EA3BM,WAAO,IAAD,EAEWzC,mBAAS,CAAC,gBAFrB,mBAElB0C,EAFkB,KAEN3C,EAFM,KAQzB,OACE,oCACE,4CACA,kBAACD,EAAD,CAAaC,cAAgBA,IAC7B,6BACA,4BAGI2C,EAAWb,KAAK,SAAAR,GAAQ,OACvB,kBAAC,EAAD,CACCmB,IAAMnB,EACNA,SAAWA,UCjBvBsB,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.fb9f4cc4.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport ProTypes from 'prop-types'\r\n\r\nexport default function AddCategory({ setCategories }) {\r\n\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  // Para actualizar el valor del input\r\n  const handleInputValue = (e) => {\r\n    setInputValue(e.target.value);\r\n  }\r\n\r\n  // Para controlar el darle enter al input\r\n  const handleSubmit = (e) => {\r\n    // Se evita el refresh\r\n    e.preventDefault();\r\n\r\n    // Se valida que no se mande un valor vacio\r\n    if(inputValue.trim().length > 2) {\r\n      setCategories(cats => [inputValue, ...cats]);\r\n      setInputValue('');\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={ handleSubmit }>\r\n      <input \r\n        type=\"text\"\r\n        value={ inputValue }\r\n        onChange={ handleInputValue }\r\n      />\r\n    </form>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories : ProTypes.func.isRequired\r\n}\r\n","import React from 'react';\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n\r\n  return (\r\n    <div className=\"card animate__animated animate__bounce\">\r\n      <img src={url} alt={title}/>\r\n      <p> {title} </p>\r\n    </div>\r\n  )\r\n}\r\n","// Metodo que llama a la api y devuelve imagenes segun la categoria\r\nexport const getGif = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=lUyX8LEVelQdrydht3FjidN5n4otWIok`;\r\n  const resp = await fetch( url );\r\n  const {data} = await resp.json();\r\n  \r\n  // Con esto hago un poco mas manejable la info que me da la api\r\n  const gifs = data.map( img => {\r\n    return {\r\n      id    : img.id,\r\n      title : img.title,\r\n      url   : img.images?.downsized_medium.url\r\n    }\r\n  });\r\n \r\n  return gifs;\r\n}","import React from 'react';\r\nimport { GifGridItem } from './GifGridItem'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n  const {data:images,  loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\r\n      { loading && <p className=\"animate__animated animate__flash\">Cargando...</p> }\r\n      <div className=\"card-grid\">\r\n          {\r\n            images.map((img) => (\r\n              <GifGridItem key={img.id} {...img} />\r\n            ))\r\n          }\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGif } from \"../helpers/getGif\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGif(category)\r\n      .then( img => {\r\n        setState({\r\n          data: img,\r\n          loading: false\r\n        })\r\n      })\r\n  },[category])\r\n \r\n\r\n  return state;\r\n}","import React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n  const [categories, setCategories] = useState(['Dragon Ball']);\r\n\r\n  // const handleAdd = () => {\r\n  //   setCategories(cats => [...cats, 'Naruto']);\r\n  // }\r\n\r\n  return (\r\n    <> \r\n      <h1>GifExpertApp</h1>\r\n      <AddCategory setCategories={ setCategories }/>\r\n      <hr/>\r\n      <ol>\r\n        {\r\n          // Aca se espera que el key sea unico siempre\r\n          categories.map( category =>\r\n           <GifGrid \r\n            key={ category }\r\n            category={ category }\r\n           />\r\n          )\r\n        }\r\n      </ol>\r\n    </>\r\n  );\r\n}\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport GifExpertApp from './GifExpertApp'\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}